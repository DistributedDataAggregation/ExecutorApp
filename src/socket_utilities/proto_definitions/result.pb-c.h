/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: result.proto */

#ifndef PROTOBUF_C_result_2eproto__INCLUDED
#define PROTOBUF_C_result_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "aggregate.pb-c.h"

typedef struct Results Results;
typedef struct Value Value;
typedef struct Result Result;
typedef struct CountedResult CountedResult;


/* --- enums --- */


/* --- messages --- */

struct  Results
{
  ProtobufCMessage base;
  size_t n_values;
  Value **values;
};
#define RESULTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&results__descriptor) \
    , 0,NULL }


struct  Value
{
  ProtobufCMessage base;
  char *grouping_value;
  size_t n_result;
  Result **result;
  size_t n_operation;
  Aggregate *operation;
};
#define VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


typedef enum {
  RESULT__RESULT_TYPES__NOT_SET = 0,
  RESULT__RESULT_TYPES_SINGLE_RESULT = 1,
  RESULT__RESULT_TYPES_COUNTED_RESULT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESULT__RESULT_TYPES__CASE)
} Result__ResultTypesCase;

struct  Result
{
  ProtobufCMessage base;
  Result__ResultTypesCase result_types_case;
  union {
    int64_t singleresult;
    CountedResult *countedresult;
  };
};
#define RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&result__descriptor) \
    , RESULT__RESULT_TYPES__NOT_SET, {0} }


struct  CountedResult
{
  ProtobufCMessage base;
  int64_t count;
  int64_t value;
};
#define COUNTED_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&counted_result__descriptor) \
    , 0, 0 }


/* Results methods */
void   results__init
                     (Results         *message);
size_t results__get_packed_size
                     (const Results   *message);
size_t results__pack
                     (const Results   *message,
                      uint8_t             *out);
size_t results__pack_to_buffer
                     (const Results   *message,
                      ProtobufCBuffer     *buffer);
Results *
       results__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   results__free_unpacked
                     (Results *message,
                      ProtobufCAllocator *allocator);
/* Value methods */
void   value__init
                     (Value         *message);
size_t value__get_packed_size
                     (const Value   *message);
size_t value__pack
                     (const Value   *message,
                      uint8_t             *out);
size_t value__pack_to_buffer
                     (const Value   *message,
                      ProtobufCBuffer     *buffer);
Value *
       value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value__free_unpacked
                     (Value *message,
                      ProtobufCAllocator *allocator);
/* Result methods */
void   result__init
                     (Result         *message);
size_t result__get_packed_size
                     (const Result   *message);
size_t result__pack
                     (const Result   *message,
                      uint8_t             *out);
size_t result__pack_to_buffer
                     (const Result   *message,
                      ProtobufCBuffer     *buffer);
Result *
       result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   result__free_unpacked
                     (Result *message,
                      ProtobufCAllocator *allocator);
/* CountedResult methods */
void   counted_result__init
                     (CountedResult         *message);
size_t counted_result__get_packed_size
                     (const CountedResult   *message);
size_t counted_result__pack
                     (const CountedResult   *message,
                      uint8_t             *out);
size_t counted_result__pack_to_buffer
                     (const CountedResult   *message,
                      ProtobufCBuffer     *buffer);
CountedResult *
       counted_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   counted_result__free_unpacked
                     (CountedResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Results_Closure)
                 (const Results *message,
                  void *closure_data);
typedef void (*Value_Closure)
                 (const Value *message,
                  void *closure_data);
typedef void (*Result_Closure)
                 (const Result *message,
                  void *closure_data);
typedef void (*CountedResult_Closure)
                 (const CountedResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor results__descriptor;
extern const ProtobufCMessageDescriptor value__descriptor;
extern const ProtobufCMessageDescriptor result__descriptor;
extern const ProtobufCMessageDescriptor counted_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_result_2eproto__INCLUDED */
